name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86, x64, arm64]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: ubuntu-latest
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Making pre-CMake setup script executable (Linux only)
      if: runner.os == 'Linux'
      run: chmod +x install_dep_linux.sh

    - name: Run pre-CMake setup (Linux only)
      if: runner.os == 'Linux'
      run: ./install_dep_linux.sh

    - name: Install 32-bit cross packages (Linux) (x86)
      if: runner.os == 'Linux' && matrix.arch == 'x86'
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib

    - name: Configure CMake (static) (Windows)
      if: runner.os == 'Windows'
      run: |
        $arch = "${{ matrix.arch }}"
        if ($arch -eq "x86") {
          $cmake_arch = "Win32"
        } elseif ($arch -eq "x64") {
          $cmake_arch = "x64"
        } elseif ($arch -eq "arm64") {
          $cmake_arch = "ARM64"
        }
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
        -G "Visual Studio 17 2022" -A $cmake_arch `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -DBUILD_SHARED_LIBS=OFF `
        -S ${{ github.workspace }}

    - name: Configure CMake (static) (Linux)
      if: runner.os == 'Linux'
      run: |
        arch="${{ matrix.arch }}"
        if [ "$arch" == "x86" ]; then
            export CFLAGS="-m32"
            export CXXFLAGS="-m32"
        elif [ "$arch" == "x64" ]; then
            export CFLAGS="-m64"
            export CXXFLAGS="-m64"
        elif [ "$arch" == "arm64" ]; then
            echo "Cross-compiling  to arm64 needs a toolchain, skipping for now"
            exit 0
        fi
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_SHARED_LIBS=0FF \
            -S ${{ github.workspace }}

    - name: Build (static)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test (static)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload artifacts (Windows only)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: static-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload artifacts (Linux only)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: static-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ steps.strings.outputs.build-output-dir }}

    - name: Configure CMake (dynamic) (Windows)
      if: runner.os == 'Windows'
      run: |
        $arch = "${{ matrix.arch }}"
        if ($arch -eq "x86") {
          $cmake_arch = "Win32"
        } elseif ($arch -eq "x64") {
          $cmake_arch = "x64"
        } elseif ($arch -eq "arm64") {
          $cmake_arch = "ARM64"
        }
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
        -G "Visual Studio 17 2022" -A $cmake_arch `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -DBUILD_SHARED_LIBS=ON `
        -S ${{ github.workspace }}

    - name: Configure CMake (dynamic) (Linux)
      if: runner.os == 'Linux'
      run: |
        arch="${{ matrix.arch }}"
        if [ "$arch" == "x86" ]; then
            export CFLAGS="-m32"
            export CXXFLAGS="-m32"
        elif [ "$arch" == "x64" ]; then
            export CFLAGS="-m64"
            export CXXFLAGS="-m64"
        elif [ "$arch" == "arm64" ]; then
            echo "Cross-compiling  to arm64 needs a toolchain, skipping for now"
            exit 0
        fi
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_SHARED_LIBS=ON \
            -S ${{ github.workspace }}

    - name: Build (dynamic)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test (dynamic)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload artifacts (Windows only)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: dynamic-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload GX (dynamic) library artifacts (Linux only)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: dynamic-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ steps.strings.outputs.build-output-dir }}
